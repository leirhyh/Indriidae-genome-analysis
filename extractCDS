#!/usr/bin/env python
#import the SeqIO, argparse, os subprocess
import argparse, os, subprocess as sp
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord



'''This function is to extract CDS from the Genbank file'''
def extractCDS(input_path, output_path):
	in_path = os.path.abspath(input_path)
	
	with open(in_path) as input_handle:
		# if output path doesn't exist, make a new folder
		if not os.path.isdir(output_path): 
			os.makedirs(output_path)
		records = list(SeqIO.parse(input_handle, "fasta"))
		genelist = []
		count = 0
		
		for record in records:
			line = str(record.description)
			
			# from fasta file, the gene info is in description, following is extract gene name
			if 'gene=' in line:
				geneName = line.split('gene=')[1].split(']')[0]
			
			if geneName not in genelist:
				newseq = '>' + geneName + '\n' + record.seq # make the seq for write
				genelist.append(geneName)
			else:
				count = count + 1
				num = str(count)
				geneName = geneName + '_' + num
			gene_file_name = geneName + '.fa'
			# make the path for write the sequence
			out_path = os.path.abspath(output_path)
			gene_file_path = os.path.join(out_path, gene_file_name)
			# write the sequence to output
			with open(gene_file_path, "w+") as output_handle:
				output_handle.write(">{}\n{}\n".format(geneName, newseq))
		

def main():
	#define the input path and output path
	parser = argparse.ArgumentParser()
	parser.add_argument("-input_path", help="input directory path", required=True)
	parser.add_argument("-output_path", help="output directory path", required=True)
	args = parser.parse_args()
	input_path = args.input_path
	output_path = args.output_path

	extractCDS(input_path, output_path) # calling the function of extractCDS

if __name__ == "__main__":
	main()
